x = "Econ/PS/Sociology Average Rank",
y = "University Overall Rank") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = socialsciences_average_rank, y = average_rank, label = university)) +
geom_point(size = 3, color = "purple", aes(color = "black"), shape = 21) +) +
ggplot(analysis_table, aes(x = socialsciences_average_rank, y = average_rank, label = university)) +
geom_point(size = 3, color = "purple", aes(color = "black"), shape = 21) +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Overall Rank vs Social Sciences Rank",
x = "Econ/PS/Sociology Average Rank",
y = "University Overall Rank") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = socialsciences_average_rank, y = average_rank, label = university)) +
geom_point(size = 3, color = "purple") +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Overall Rank vs Social Sciences Rank",
x = "Econ/PS/Sociology Average Rank",
y = "University Overall Rank") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = average_rank, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "University Ranking vs. Endowment per Student",
x = "Endowment per Student (in million USD)",
y = "University Overall Rank") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = average_rank, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "University Overall Rank vs. Endowment per Student",
x = "Endowment per Student (in million USD)",
y = "University Overall Rank") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Median Household Income vs Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Median Household Income") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = average_rank, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "University Overall Rank vs. Endowment per Student",
x = "Endowment per Student (in million USD)",
y = "University Overall Rank") +
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Median Household Income vs Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Median Household Income") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Median Household Income vs Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Median Household Income") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_revenue_per_student, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Revenue per Student vs Average Median Household",
x = "Average Revenue per Student",
y = "Median Household Income") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_revenue_per_student, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Revenue per Student vs Average Median Household",
x = "Average Revenue per Student",
y = "Median Household Income") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
View(geographic_table)
# 3. Create the map ----------------------
# We create the subsets for the mapping variables
IvyLeague_universities <- subset(geographic_table, ivyleague == "Ivy League")
NonIvyLeague_universities <- subset(geographic_table, ivyleague == "Not Ivy League")
# We set the map
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
# We create the map
tm_shape(USA_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(IvyLeague_universities) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(NonIvyLeague_universities) +
tm_dots(col = "Status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
# 1. Setup ----------------------------------------
# We get state boundaries
states <- tigris::states()
# We remove from our set the ones that we don't need
USA_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# First, coordinates
# We extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# We assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# We remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# We will first load all the packages that we need for this assignment
# We call 'suppresWarnings()' to omit the warnings in the knitted document - in case we get some
suppressWarnings(library('DBI'))
suppressWarnings(library('RSQLite'))
library('rvest')
library('dplyr')
library('stringr')
library('RSelenium')
library('httr')
library('jsonlite')
library('tidycensus')
library('tidyverse')
suppressWarnings(library('ggplot2'))
library('ggrepel')
library('tigris')
suppressWarnings(library('tmap'))
library('sf')
# We create the table that we want with the variables of interest
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
#We create the path to a SQLite database file
mydatabase <- "./database/mydatabase.sqlite"
#We create the connection to this database
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
#We check for the existence of the relational database
if (file.exists(mydatabase)) {
print("Database file exists.")
} else {
print("Error: Database file not found.")
}
# We open the connection once again
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
# We get the information that we want for our analysis table
analysis_table <- dbGetQuery(connection, 'WITH
"UniversityRankings" AS (
SELECT university,
AVG(ranking) AS average_rank
FROM rankingsuniversities
WHERE year IN (2003, 2013, 2023)
GROUP BY university
),
"SocialSciencesRanks" AS (
SELECT university,
AVG(ranking) AS socialsciences_average_rank
FROM rankingsuniversities_socialsciences
WHERE subject IN ("economics", "political sciences", "sociology")
GROUP BY university
),
"IvyLeagueEndowment" AS (
SELECT university,
endowment / students AS avg_endow_perstudent
FROM datauniversities
WHERE ivyleague = 1
),
"TotalRevenuePerStudent" AS (
SELECT du.university,
AVG(ppd.total_revenue) / du.students AS avg_revenue_per_student
FROM datauniversities du
JOIN propublicadata_universities ppd ON du.university = ppd.university
WHERE ppd.year IN (2015, 2020)
GROUP BY du.university
),
"MedianHouseholdIncome" AS (
SELECT university,
AVG(medianincome) AS medianhouseholdincome
FROM datacensus_universities
WHERE year IN (2015, 2020)
GROUP BY university
)
SELECT
ua.university,
ua.average_rank,
us.socialsciences_average_rank,
ud.avg_endow_perstudent,
ur.avg_revenue_per_student,
um.medianhouseholdincome
FROM
UniversityRankings ua
JOIN
SocialSciencesRanks us ON ua.university = us.university
JOIN
IvyLeagueEndowment ud ON ua.university = ud.university
JOIN
TotalRevenuePerStudent ur ON ua.university = ur.university
JOIN
MedianHouseholdIncome um ON ua.university = um.university')
# We create the table that we want with the variables of interest
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
# 1. Setup ----------------------------------------
# We get state boundaries
states <- tigris::states()
# We remove from our set the ones that we don't need
USA_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# First, coordinates
# We extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# We assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# We remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
# We create an sf spatial object
geographic_table <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
# Second, Ivyleague and Status
# We convert it to factor to be able to plot it
geographic_table$ivyleague <- factor(geographic_table$ivyleague, levels = c(0, 1), labels = c("Not Ivy League", "Ivy League"))
geographic_table$status <- factor(geographic_table$status)
# Capitalize only the first letter of variable names
colnames(geographic_table) <- tools::toTitleCase(colnames(geographic_table))
View(geographic_table)
View(geographic_table)
#We create the path to a SQLite database file
mydatabase <- "./database/mydatabase.sqlite"
#We create the connection to this database
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
#We check for the existence of the relational database
if (file.exists(mydatabase)) {
print("Database file exists.")
} else {
print("Error: Database file not found.")
}
# We create the table that we want with the variables of interest
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
# 1. Setup ----------------------------------------
# We get state boundaries
states <- tigris::states()
# We remove from our set the ones that we don't need
USA_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# First, coordinates
# We extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# We remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
# We create an sf spatial object
geographic_table <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
# Second, Ivyleague and Status
# We convert it to factor to be able to plot it
geographic_table$ivyleague <- factor(geographic_table$ivyleague, levels = c(0, 1), labels = c("Not Ivy League", "Ivy League"))
geographic_table$status <- factor(geographic_table$status)
# Capitalize only the first letter of variable names
colnames(geographic_table) <- tools::toTitleCase(colnames(geographic_table))
View(geographic_table)
IvyLeague_universities <- subset(geographic_table, ivyleague == "Ivy League")
# We create the table that we want with the variables of interest
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
#We create the path to a SQLite database file
mydatabase <- "./database/mydatabase.sqlite"
#We create the connection to this database
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
#We check for the existence of the relational database
if (file.exists(mydatabase)) {
print("Database file exists.")
} else {
print("Error: Database file not found.")
}
# We create the table that we want with the variables of interest
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
# 1. Setup ----------------------------------------
# We get state boundaries
states <- tigris::states()
# We remove from our set the ones that we don't need
USA_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# First, coordinates
# We extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# We assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# We remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
# We create an sf spatial object
geographic_table <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
# Second, Ivyleague and Status
# We convert it to factor to be able to plot it
geographic_table$ivyleague <- factor(geographic_table$ivyleague, levels = c(0, 1), labels = c("Not Ivy League", "Ivy League"))
geographic_table$status <- factor(geographic_table$status)
# 3. Create the map ----------------------
# We create the subsets for the mapping variables
IvyLeague_universities <- subset(geographic_table, ivyleague == "Ivy League")
NonIvyLeague_universities <- subset(geographic_table, ivyleague == "Not Ivy League")
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
tm_shape(USA_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(IvyLeague_universities) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(NonIvyLeague_universities) +
tm_dots(col = "Status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Median Household Income vs Current Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Average Median Household Income (across 2015-2020)") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format(scale = 1e-6))
# EXERCISE 1 --------------------------------------------
#We create the path to a SQLite database file
mydatabase <- "./database/mydatabase.sqlite"
#We create the connection to this database
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
#We check for the existence of the relational database
if (file.exists(mydatabase)) {
print("Database file exists.")
} else {
print("Error: Database file not found.")
}
# EXERCISE 5 ------------------------------------------------
# EXERCISE 5A
# We open the connection once again
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
# We get the information that we want for our analysis table
analysis_table <- dbGetQuery(connection, 'WITH
"UniversityRankings" AS (
SELECT university,
AVG(ranking) AS average_rank
FROM rankingsuniversities
WHERE year IN (2003, 2013, 2023)
GROUP BY university
),
"SocialSciencesRanks" AS (
SELECT university,
AVG(ranking) AS socialsciences_average_rank
FROM rankingsuniversities_socialsciences
WHERE subject IN ("economics", "political sciences", "sociology")
GROUP BY university
),
"IvyLeagueEndowment" AS (
SELECT university,
endowment / students AS avg_endow_perstudent
FROM datauniversities
WHERE ivyleague = 1
),
"TotalRevenuePerStudent" AS (
SELECT du.university,
AVG(ppd.total_revenue) / du.students AS avg_revenue_per_student
FROM datauniversities du
JOIN propublicadata_universities ppd ON du.university = ppd.university
WHERE ppd.year IN (2015, 2020)
GROUP BY du.university
),
"MedianHouseholdIncome" AS (
SELECT university,
AVG(medianincome) AS medianhouseholdincome
FROM datacensus_universities
WHERE year IN (2015, 2020)
GROUP BY university
)
SELECT
ua.university,
ua.average_rank,
us.socialsciences_average_rank,
ud.avg_endow_perstudent,
ur.avg_revenue_per_student,
um.medianhouseholdincome
FROM
UniversityRankings ua
JOIN
SocialSciencesRanks us ON ua.university = us.university
JOIN
IvyLeagueEndowment ud ON ua.university = ud.university
JOIN
TotalRevenuePerStudent ur ON ua.university = ur.university
JOIN
MedianHouseholdIncome um ON ua.university = um.university')
# Graph 3 -------------------------------------
# Scatter plot - Relationship between the Median household income and the Endowment per Student
ggplot(analysis_table, aes(x = avg_endow_perstudent, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Median Household Income vs Current Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Average Median Household Income (across 2015-2020)") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format(scale = 1e-6))
ggplot(analysis_table, aes(x = avg_endow_perstudent * 100000, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Median Household Income vs Current Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Average Median Household Income (2015-2020)") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_endow_perstudent * 1000000, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Median Household Income vs Current Endowmnet per Student",
x = "Endowment per Student (in million USD)",
y = "Average Median Household Income (2015-2020)") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_endow_perstudent * 1000000, y = average_rank, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average University Overall Rank vs. Current Endowment per Student",
x = "Endowment per Student",
y = "Average University Overall Rank (2003, 2013 and 2023") +
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = socialsciences_average_rank, y = average_rank, label = university)) +
geom_point(size = 3, color = "purple") +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average University Overall Rank vs Social Sciences Average Rank",
x = "Econ/PS/Sociology University Average Rank (2023)",
y = "Average University Rank (2003, 2013 and 2023") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = socialsciences_average_rank, y = average_rank, label = university)) +
geom_point(size = 3, color = "purple") +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average University Overall Rank vs Average Social Sciences Rank",
x = "Econ/PS/Sociology University Average Rank (2023)",
y = "Average University Rank (2003, 2013 and 2023") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = socialsciences_average_rank, y = average_rank, label = university)) +
geom_point(size = 3, color = "purple") +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average University Overall Rank vs Average Social Sciences Rank",
x = "Econ/PS/Sociology University Average Rank (2023)",
y = "Average University Rank (2003, 2013 and 2023)") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(analysis_table, aes(x = avg_endow_perstudent * 1000000, y = average_rank, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average University Overall Rank vs. Current Endowment per Student",
x = "Current endowment per Student",
y = "Average University Rank (2003, 2013 and 2023)") +
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_endow_perstudent * 1000000, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Median Household Income vs Current Endowmnet per Student",
x = "Current Endowment per Student",
y = "Average Median Household Income (2015-2020)") +
theme(plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
ggplot(analysis_table, aes(x = avg_revenue_per_student, y = medianhouseholdincome, label = university)) +
geom_point(size = 3, color = 'purple') +
geom_text_repel(box.padding = 1, segment.color = "grey", segment.size = 0.2) +
geom_smooth(method = "lm", se = FALSE, color = "black", size = 0.4, linetype = "dashed") +
labs(title = "Average Median Household Income vs Average Revenue per Student",
x = "Average Revenue per Student (2015-2020)",
y = "Average Median Household Income (2015-2020)") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(labels = scales::dollar_format())+
scale_x_continuous(labels = scales::dollar_format())
