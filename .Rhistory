tm_borders(lwd = 0.02) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.8) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.005, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top")) +
# Add the legend for the yellow-bordered dots
tm_add_legend(type = "dots", col = "yellow", title = "Yellow Border",
labels = "Yellow Border", size = 0.8, shape = "square", shape.col = "red")
# Create the map
tm_shape(states) +
tm_fill("white") +
tm_shape(target_states) +
tm_fill("lightgrey") +
tm_borders(lwd = 0.02) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.8) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.005, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top")) +
# Add the legend for the yellow-bordered dots
tm_add_legend(type = "dots", col = "yellow", title = "Yellow Border",
labels = "Yellow Border", size = 0.8, shape = "square")
# Create the map
tm_shape(states) +
tm_fill("white") +
tm_shape(target_states) +
tm_fill("lightgrey") +
tm_borders(lwd = 0.02) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.8) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.005, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top")) +
tm_add_legend(type = "dots", col = "status", title = "University Type",
labels = c("Private (non-profit)", "Public"),
palette = c("red", "lightblue"), size = 0.2) +
# Custom legend for the yellow-bordered dots
tm_layout(
legend.position = c("right", "top"),
legend.text.col = "yellow",
legend.title.txt = "Yellow Border",
legend.bg.color = "white",
legend.outside = TRUE,
legend.frame = TRUE,
legend.text.align = "left",
legend.text.only = TRUE,
title.position = c("right", "top"),
title.txt = "Yellow Border"
)
# Create a custom legend for the yellow-bordered dots
legend_points <- list(
type = "points",
col = "yellow",
size = 3,
shape = 16,
labels = "Yellow Border"
)
tm_map +
tm_symbols(
legend = legend_points,
size = 0,
title = "",
shape = NA
)
tm_map <- tm_shape(states) +
tm_fill("white") +
tm_shape(target_states) +
tm_fill("lightgrey") +
tm_borders(lwd = 0.02) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.8) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.005, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
# Create a custom legend for the yellow-bordered dots
legend_points <- list(
type = "points",
col = "yellow",
size = 3,
shape = 16,
labels = "Yellow Border"
)
# Manually add the legend to the map
tm_map +
tm_symbols(
legend = legend_points,
size = 0,
title = "",
shape = NA
)
# Manually add the legend to the map
tm_map +
tm_symbols(
legend = legend_points,
size = 0,
title = ""
)
tm_shape(states) +
tm_fill("white") +
tm_shape(target_states) +
tm_fill("lightgrey") +
tm_borders(lwd = 0.02) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.8) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.005, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
tm_shape(states) +
tm_fill("white") +
tm_shape(target_states) +
tm_fill("lightgrey") +
tm_borders(lwd = 0.02) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
# We will first load all the packages that we need for this assignment
# We call 'suppresWarnings()' to omit the warnings in the knitted document
suppressWarnings(library('DBI'))
suppressWarnings(library('RSQLite'))
library('rvest')
library('dplyr')
library('stringr')
library('RSelenium')
library('httr')
library('jsonlite')
library('tidycensus')
library('tidyverse')
library('ggplot2')
library('ggrepel')
library('tigris')
library('tmap')
library('sf')
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3,border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3,border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3, border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
View(target_states)
View(target_states)
View(geographic_table)
ivy_subset <- subset(geographic_table, ivyleague == "Ivy League")
non_ivy_subset <- subset(geographic_table, ivyleague == "Not Ivy League")
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3, border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3, border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top")
legend.outside = TRUE, frame = FALSE)
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3, border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"),
legend.outside = TRUE, frame = FALSE)
ivy_subset <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
non_ivy_subset <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3, border.col = "yellow", border.lwd = 5, col = "status", palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"),
legend.outside = TRUE, frame = FALSE)
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(size = 0.3, border.col = "yellow", border.lwd = 5, col = "red") +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"),
legend.outside = TRUE, frame = FALSE)
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
# We will first load all the packages that we need for this assignment
# We call 'suppresWarnings()' to omit the warnings in the knitted document
suppressWarnings(library('DBI'))
suppressWarnings(library('RSQLite'))
library('rvest')
library('dplyr')
library('stringr')
library('RSelenium')
library('httr')
library('jsonlite')
library('tidycensus')
library('tidyverse')
library('ggplot2')
library('ggrepel')
library('tigris')
library('tmap')
library('sf')
#We create the path to a SQLite database file
mydatabase <- "./database/mydatabase.sqlite"
#We create the connection to this database
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
#We check for the existence of the relational database
if (file.exists(mydatabase)) {
print("Database file exists.")
} else {
print("Error: Database file not found.")
}
# 1. Setup ----------------------------------------
# Get state boundaries
states <- tigris::states()
plot(states$geometry)
# Remove from our set the ones that we don't need
target_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# COORDINATES
# Extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# Assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# Remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
# 1. Setup ----------------------------------------
# Get state boundaries
states <- tigris::states()
plot(states$geometry)
# Remove from our set the ones that we don't need
target_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# COORDINATES
# Extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# Assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# Remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
# Create an sf spatial object
geographic_table <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
# IVYLEAGUE
# Convert it to factor to be able to plot it
geographic_table$ivyleague <- factor(geographic_table$ivyleague, levels = c(0, 1), labels = c("Not Ivy League", "Ivy League"))
#STATUS
# Convert it to factor
geographic_table$status <- factor(geographic_table$status)
# 3. Create the map ----------------------
# Create the mapping variables
# Variable 1: Ivy League universities (Blue larger points)
ivy_subset <- subset(geographic_table, ivyleague == "Ivy League")
non_ivy_subset <- subset(geographic_table, ivyleague == "Not Ivy League")
# Set the map
tmap_options(check.and.fix = TRUE)
# We will first load all the packages that we need for this assignment
# We call 'suppresWarnings()' to omit the warnings in the knitted document
suppressWarnings(library('DBI'))
suppressWarnings(library('RSQLite'))
library('rvest')
library('dplyr')
library('stringr')
library('RSelenium')
library('httr')
library('jsonlite')
library('tidycensus')
library('tidyverse')
library('ggplot2')
library('ggrepel')
library('tigris')
library('tmap')
library('sf')
# 1. Setup ----------------------------------------
# Get state boundaries
states <- tigris::states()
plot(states$geometry)
# Remove from our set the ones that we don't need
target_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# COORDINATES
# Extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# Assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# Remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
states <- tigris::states()
plot(states$geometry)
# Remove from our set the ones that we don't need
target_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# COORDINATES
# Extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
geographic_table <- geographic_table[complete.cases(geographic_table), ]
# Create an sf spatial object
geographic_table <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
# IVYLEAGUE
# Convert it to factor to be able to plot it
geographic_table$ivyleague <- factor(geographic_table$ivyleague, levels = c(0, 1), labels = c("Not Ivy League", "Ivy League"))
#STATUS
# Convert it to factor
geographic_table$status <- factor(geographic_table$status)
ivy_subset <- subset(geographic_table, ivyleague == "Ivy League")
non_ivy_subset <- subset(geographic_table, ivyleague == "Not Ivy League")
# Set the map
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
# Create the map
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
# We will first load all the packages that we need for this assignment
# We call 'suppresWarnings()' to omit the warnings in the knitted document
suppressWarnings(library('DBI'))
suppressWarnings(library('RSQLite'))
library('rvest')
library('dplyr')
library('stringr')
library('RSelenium')
library('httr')
library('jsonlite')
library('tidycensus')
library('tidyverse')
library('ggplot2')
library('ggrepel')
library('tigris')
library('tmap')
library('sf')
#We create the path to a SQLite database file
mydatabase <- "./database/mydatabase.sqlite"
#We create the connection to this database
connection <- dbConnect(RSQLite::SQLite(), mydatabase)
#We check for the existence of the relational database
if (file.exists(mydatabase)) {
print("Database file exists.")
} else {
print("Error: Database file not found.")
}
geographic_table <- dbGetQuery(connection, 'SELECT university, coordinates, status, ivyleague
FROM datauniversities')
# 1. Setup ----------------------------------------
# Get state boundaries
states <- tigris::states()
plot(states$geometry)
# Remove from our set the ones that we don't need
target_states <- states %>%
filter(!STUSPS %in% c("VI", "MP", "GU", "AS"))
# 2. Adjust the variables -------------------------
# COORDINATES
# Extract numeric values for latitude and longitude
geographic_table$latitude <- as.numeric(sub("([0-9.]+)°[NSEW].*", "\\1", geographic_table$coordinates))
geographic_table$longitude <- as.numeric(sub(".*[NSEW] ([0-9.]+)°[NSEW]", "\\1", geographic_table$coordinates))
# Assign the correct sign based on the directional indicators
geographic_table$latitude <- ifelse(grepl("S", geographic_table$coordinates), -geographic_table$latitude, geographic_table$latitude)
geographic_table$longitude <- ifelse(grepl("W", geographic_table$coordinates), -geographic_table$longitude, geographic_table$longitude)
# Remove the NA rows
geographic_table <- geographic_table[complete.cases(geographic_table), ]
# Create an sf spatial object
geographic_table <- st_as_sf(geographic_table, coords = c("longitude", "latitude"), crs = 4326)
# IVYLEAGUE
# Convert it to factor to be able to plot it
geographic_table$ivyleague <- factor(geographic_table$ivyleague, levels = c(0, 1), labels = c("Not Ivy League", "Ivy League"))
#STATUS
# Convert it to factor
geographic_table$status <- factor(geographic_table$status)
# 3. Create the map ----------------------
# Create the mapping variables
# Variable 1: Ivy League universities (Blue larger points)
ivy_subset <- subset(geographic_table, ivyleague == "Ivy League")
non_ivy_subset <- subset(geographic_table, ivyleague == "Not Ivy League")
# Set the map
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
# Create the map
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
# As a last step and good practice, we end the connection that we created in the first exercise
dbDisconnect(connection)
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
tm_shape(target_states) +
tm_borders(lwd = 0.2) +
# Add the Ivy League universities
tm_shape(ivy_subset) +
tm_dots(border.col = "yellow", border.lwd = 5, col = "red", size = 0.3) +
# Add the non Ivy League universities
tm_shape(non_ivy_subset) +
tm_dots(col = "status", size = 0.05, palette = c("Private (non-profit)"='red', "Public"='lightblue')) +
# Add the legend
tm_layout(legend.position = c("right", "top"))
